# -*- coding: utf-8 -*-
"""Conflict_serializable.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i_F_-TNIQ39VIHTMa33ZPqqPfDKN78q0
"""

from collections import defaultdict

class PrecedenceGraph:
    def __init__(self, vertices):
        self.graph = defaultdict(list)
        self.V = vertices

    def add_edge(self, u, v):
        self.graph[u].append(v)

    def is_cyclic(self, v, visited, rec_stack):
        visited[v] = True
        rec_stack[v] = True

        for neighbour in self.graph[v]:
            if not visited[neighbour]:
                if self.is_cyclic(neighbour, visited, rec_stack):
                    return True
            elif rec_stack[neighbour]:
                return True

        rec_stack[v] = False
        return False

    def has_cycle(self):
        visited = [False] * self.V
        rec_stack = [False] * self.V

        for node in range(self.V):
            if not visited[node]:
                if self.is_cyclic(node, visited, rec_stack):
                    return True
        return False

# Example
if __name__ == "__main__":
    g = PrecedenceGraph(4)
    g.add_edge(0, 1)
    g.add_edge(1, 2)
    g.add_edge(2, 3)

    # Uncomment to create cycle
    # g.add_edge(3, 1)

    if g.has_cycle():
        print("Cycle detected: Schedule is NOT conflict serializable.")
    else:
        print("No cycle: Schedule is conflict serializable.")